1. Two Sum

    class Solution {
      public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        
        for(int i = 0; i < nums.length; i++) {
             int diff = target - nums[i];
             if(map.containsKey(diff)) {
                result[1] = i; 
                result[0] = map.get(diff);
                break;
             }
             map.put(nums[i], i);
          }
          return result;
        }
    }
	
2.  Fizz Buzz

    class Solution {
        public List<String> fizzBuzz(int n) {
           List<String> list = new ArrayList<String>(n);

            for (int i = 0; i < n; i++) {
              int no = i + 1;
                if(no % 15 == 0) 
                  list.add("FizzBuzz");
                else if(no % 5 == 0 || no % 3 == 0) 
                  list.add(no % 5 == 0 ? "Buzz" : "Fizz");
                else 
                  list.add("" + no);
            }
        return list;
       }
    }
3. Roman to Integer

   const romanToInt = function(s) {
    let no = 0;
    const map = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000,
        'IV': 4,
        'IX': 9,
        'XL': 40,
        'XC': 90,
        'CD': 400,
        'CM': 900
    }
  
       for(let i = 0; i < s.length; i++) {
          if((s[i+1] === 'V' || s[i+1] === 'X') && s[i] === 'I') {
            let str = s[i] + s[i+1];
            no += map[str];
            i+= 1;
          } 
          else if((s[i+1] === 'L' || s[i+1] === 'C') && s[i] === 'X') {
            let str = s[i] + s[i+1];
            no += map[str];
            i+= 1;
          }
           else if((s[i+1] === 'D' || s[i+1] === 'M') && s[i] === 'C') {
             let str = s[i] + s[i+1];
             no += map[str];
             i+= 1;
           }  
           else no += map[s[i]];
        };
    
        return no;
    };	
	
4. Happy Number:- 
   The happy number can be defined as a number which will yield 1 when it is replaced by the sum of the square of its digits repeatedly. 
   If this process results in an endless cycle of numbers containing 4, then the number is called an unhappy number.

   const isHappy = function(n) {
    let no = n;
    if(1 === n || 7 === n) return true;
    if([2, 4, 3, 5, 6, 9, 8].includes(n)) return false;
    
       while(true) {
           const noSum = no.toString().split('').reduce((p, c) => p+= c ** 2, 0);

           if(noSum === 4) return false;
           if(noSum === 1 || noSum === 7) return true;
        
           no = noSum;
        }
    };	
	
5. Excel Sheet Column Number

    const titleToNumber = function(columnTitle) { 
   
      let colNo = 0; 
      const pos = ch => (ch.charCodeAt(0) + 1) - 65;
    
      for (let i = columnTitle.length - 1; i >= 0; i--) {
         colNo += 26 ** ((columnTitle.length - 1)-i) * pos(columnTitle[i]); 
      }
    
      return colNo; 
    };	
	